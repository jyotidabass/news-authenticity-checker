name: Deploy to Environments

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      version:
        description: 'Version to deploy'
        required: false
        type: string
  push:
    branches: [ develop ]
    paths:
      - 'app.py'
      - 'requirements.txt'
      - '.github/workflows/**'

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Deploy to Staging
  deploy-staging:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run tests
      run: |
        python -m pytest test_app.py test_offline.py -v
    
    - name: Deploy to Vercel (Staging)
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        npm install --global vercel@latest
        vercel --token=$VERCEL_TOKEN --yes --env VERCEL_ENV=staging
    
    - name: Notify deployment
      run: |
        echo "üöÄ Successfully deployed to staging environment"
        echo "Environment: staging"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"

  # Deploy to Production
  deploy-production:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    needs: deploy-staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run comprehensive tests
      run: |
        python -m pytest test_app.py test_offline.py -v --cov=app --cov-report=xml
    
    - name: Security scan
      run: |
        pip install safety
        safety check --json --output safety-report.json || true
    
    - name: Deploy to Vercel (Production)
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
        VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
      run: |
        npm install --global vercel@latest
        vercel --prod --token=$VERCEL_TOKEN --yes --env VERCEL_ENV=production
    
    - name: Create Git tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -a "v${{ github.run_number }}" -m "Production deployment v${{ github.run_number }}"
        git push origin "v${{ github.run_number }}"
    
    - name: Notify deployment
      run: |
        echo "üéâ Successfully deployed to production environment"
        echo "Environment: production"
        echo "Version: v${{ github.run_number }}"
        echo "Branch: ${{ github.ref }}"
        echo "Commit: ${{ github.sha }}"

  # Health Check
  health-check:
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Check staging health
      if: needs.deploy-staging.result == 'success'
      run: |
        echo "üîç Checking staging environment health..."
        # Add your staging health check URL here
        # curl -f https://your-staging-app.vercel.app/health || exit 1
        echo "‚úÖ Staging environment is healthy"
    
    - name: Check production health
      if: needs.deploy-production.result == 'success'
      run: |
        echo "üîç Checking production environment health..."
        # Add your production health check URL here
        # curl -f https://your-production-app.vercel.app/health || exit 1
        echo "‚úÖ Production environment is healthy"
    
    - name: Deployment summary
      run: |
        echo "üìä Deployment Summary:"
        echo "Staging: ${{ needs.deploy-staging.result }}"
        echo "Production: ${{ needs.deploy-production.result }}"
        echo "Health Check: ${{ job.result }}"
