name: Quality Gates & Security

on:
  schedule:
    - cron: '0 2 * * 1'  # Run every Monday at 2 AM
  workflow_dispatch:
  pull_request:
    branches: [ main, develop ]

jobs:
  # Code Quality Analysis
  quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install quality tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit pylint mypy radon
    
    - name: Run Bandit security checks
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Pylint
      run: |
        pylint app.py --output-format=json > pylint-report.json || true
    
    - name: Run MyPy type checking
      run: |
        mypy app.py --json-report mypy-report.json || true
    
    - name: Calculate code complexity
      run: |
        radon cc app.py -j > radon-cc.json
        radon mi app.py -j > radon-mi.json
        radon hal app.py -j > radon-hal.json
    
    - name: Upload quality reports
      uses: actions/upload-artifact@v3
      with:
        name: quality-reports
        path: |
          bandit-report.json
          pylint-report.json
          mypy-report.json
          radon-cc.json
          radon-mi.json
          radon-hal.json

  # Dependency Vulnerability Scan
  dependency-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install safety and pip-audit
      run: |
        python -m pip install --upgrade pip
        pip install safety pip-audit
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Run pip-audit
      run: |
        pip-audit --format json --output pip-audit-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          safety-report.json
          pip-audit-report.json

  # Performance Testing
  performance:
    runs-on: ubuntu-latest
    needs: quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install performance tools
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install locust pytest-benchmark
    
    - name: Run performance tests
      run: |
        python -m pytest test_app.py --benchmark-only --benchmark-json=benchmark-results.json || true
    
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark-results.json

  # Documentation Check
  docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Check README formatting
      run: |
        # Check if README.md exists and has content
        if [ ! -s README.md ]; then
          echo "❌ README.md is empty or missing"
          exit 1
        fi
        
        # Check for required sections
        required_sections=("Features" "Installation" "Usage" "Technologies")
        for section in "${required_sections[@]}"; do
          if ! grep -q "## $section" README.md; then
            echo "❌ Missing required section: $section"
            exit 1
          fi
        done
        
        echo "✅ README.md validation passed"
    
    - name: Check code documentation
      run: |
        python -m pip install --upgrade pip
        pip install pydocstyle
        
        # Check Python docstrings
        pydocstyle app.py || true
    
    - name: Generate documentation coverage
      run: |
        python -c "
        import ast
        import os
        
        def count_functions(file_path):
            with open(file_path, 'r') as f:
                tree = ast.parse(f.read())
            
            functions = [node for node in ast.walk(tree) if isinstance(node, ast.FunctionDef)]
            documented = [f for f in functions if f.body and isinstance(f.body[0], ast.Expr) and isinstance(f.body[0].value, ast.Str)]
            
            return len(functions), len(documented)
        
        total, documented = count_functions('app.py')
        coverage = (documented / total * 100) if total > 0 else 0
        
        print(f'Function documentation coverage: {coverage:.1f}%')
        print(f'Total functions: {total}')
        print(f'Documented functions: {documented}')
        
        with open('doc-coverage.json', 'w') as f:
            import json
            json.dump({
                'total_functions': total,
                'documented_functions': documented,
                'coverage_percentage': coverage
            }, f)
        "
    
    - name: Upload documentation reports
      uses: actions/upload-artifact@v3
      with:
        name: documentation-reports
        path: doc-coverage.json
